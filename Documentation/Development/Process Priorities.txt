Even with my foreground-window-process-boost approach under Ion, items in the systray don't get a boots because of the way Ion manages them (they're somehow insulated and don't seem to receive focus as such; you can't type into them, for example).  Because the interactive DeskNerd components are always there and should always be responsive, it might be appropriate to run them with an increased CPU and I/O scheduling priority.  I remember that being one big difference between the classic Mac OS Apple Menu and the Windows 98 Start Menu: the Apple Menu was seemingly pre-cached and pinned in RAM and was always responsive, whereas the Start Menu stuff could be paged out or needed to load icons from disk, which could lead to interminable waits when all you wanted to do was run a program.

Running the window manager itself at elevated priority is probably also reasonable.  Actually, I notice the X process runs at niceness -1 already.  Perhaps run X at -3, the WM at -2, and any high-priority interactive tasks at -1.

Also, what about high-priority processes that should remain at high priority even when not in focus?  Ardour and Pd, for example.  Maybe have an exception list.  This should probably also be co-ordinated with my "run-low-priority" aliases/functions/scripts for long-running, non-real-time, non-interactive commands (such as gmake, gcc, updatedb, etc.).

